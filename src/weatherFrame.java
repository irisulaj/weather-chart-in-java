import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.Iterator;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author iri_s
 */
public class weatherFrame extends javax.swing.JFrame {
    
    private String id;
    private String name;
    private String temperature;
    private String wind;
    private String humidity;

    public String getId() {
        return id;
    }

    public void setId(String id) {
        this.id = id;
    }
    @Override
    public String getName() {
        return name;
    }
     @Override
    public void setName(String name) {
        this.name = name;
    }
    
    public String getTemperature() {
        return temperature;
    }

    public void setTemperature(String temperature) {
        this.temperature = temperature;
    }

    public String getWind() {
        return wind;
    }

    public void setWind(String wind) {
        this.wind = wind;
    }

    public String getHumidity() {
        return humidity;
    }

    public void setHumidity(String humidity) {
        this.humidity = humidity;
    }
    
    public weatherFrame(String id, String name, String temperature, String wind, String humidity){
     this.id = id;
     this.name = name;
     this.temperature = temperature;
     this.wind = wind;
     this.humidity = humidity;
    
    }

    /**
     * Creates new form weatherFrame
     */
    public weatherFrame() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        dataPanel = new javax.swing.JPanel();
        lblDistrictId = new javax.swing.JLabel();
        lblDistrict = new javax.swing.JLabel();
        lblTemperature = new javax.swing.JLabel();
        lblWind = new javax.swing.JLabel();
        lblHumidity = new javax.swing.JLabel();
        errorMsgDistrict = new javax.swing.JLabel();
        txtDistrictId = new javax.swing.JTextField();
        txtDistrictName = new javax.swing.JTextField();
        txtDistrictTemperature = new javax.swing.JTextField();
        txtDistrictWind = new javax.swing.JTextField();
        txtDistrictHumidity = new javax.swing.JTextField();
        DistrictPane = new javax.swing.JScrollPane();
        DistrictTable = new javax.swing.JTable();
        btnAddDistrict = new javax.swing.JButton();
        btnCancelDistrict = new javax.swing.JButton();
        btnUpdateDistrict = new javax.swing.JButton();
        btnDeleteDistrict = new javax.swing.JButton();
        graphPanel = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Weather Observer Pattern\n");
        setResizable(false);
        addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                formComponentShown(evt);
            }
        });
        getContentPane().setLayout(new java.awt.CardLayout());

        dataPanel.setBackground(new java.awt.Color(255, 255, 255));

        lblDistrictId.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        lblDistrictId.setForeground(new java.awt.Color(0, 153, 51));
        lblDistrictId.setText("District ID");

        lblDistrict.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        lblDistrict.setForeground(new java.awt.Color(0, 153, 51));
        lblDistrict.setText("Name");

        lblTemperature.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        lblTemperature.setForeground(new java.awt.Color(0, 153, 51));
        lblTemperature.setText("Temperature");

        lblWind.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        lblWind.setForeground(new java.awt.Color(0, 153, 51));
        lblWind.setText("Wind");

        lblHumidity.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        lblHumidity.setForeground(new java.awt.Color(0, 153, 51));
        lblHumidity.setText("Humidity");

        errorMsgDistrict.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        errorMsgDistrict.setForeground(new java.awt.Color(0, 153, 51));

        txtDistrictId.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        txtDistrictId.setForeground(new java.awt.Color(0, 153, 51));

        txtDistrictName.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        txtDistrictName.setForeground(new java.awt.Color(0, 153, 51));

        txtDistrictTemperature.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        txtDistrictTemperature.setForeground(new java.awt.Color(0, 153, 51));

        txtDistrictWind.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        txtDistrictWind.setForeground(new java.awt.Color(0, 153, 51));

        txtDistrictHumidity.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        txtDistrictHumidity.setForeground(new java.awt.Color(0, 153, 51));

        DistrictTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "District", "Temperature", "Wind", "Humidity"
            }
        ));
        DistrictTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                DistrictTableMouseClicked(evt);
            }
        });
        DistrictPane.setViewportView(DistrictTable);

        btnAddDistrict.setBackground(new java.awt.Color(0, 153, 51));
        btnAddDistrict.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        btnAddDistrict.setForeground(new java.awt.Color(255, 255, 255));
        btnAddDistrict.setText("Add");
        btnAddDistrict.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddDistrictActionPerformed(evt);
            }
        });

        btnCancelDistrict.setBackground(new java.awt.Color(0, 153, 51));
        btnCancelDistrict.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        btnCancelDistrict.setForeground(new java.awt.Color(255, 255, 255));
        btnCancelDistrict.setText("Cancel");
        btnCancelDistrict.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelDistrictActionPerformed(evt);
            }
        });

        btnUpdateDistrict.setBackground(new java.awt.Color(0, 153, 51));
        btnUpdateDistrict.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        btnUpdateDistrict.setForeground(new java.awt.Color(255, 255, 255));
        btnUpdateDistrict.setText("Update");
        btnUpdateDistrict.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateDistrictActionPerformed(evt);
            }
        });

        btnDeleteDistrict.setBackground(new java.awt.Color(0, 153, 51));
        btnDeleteDistrict.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        btnDeleteDistrict.setForeground(new java.awt.Color(255, 255, 255));
        btnDeleteDistrict.setText("Delete");
        btnDeleteDistrict.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteDistrictActionPerformed(evt);
            }
        });

        graphPanel.setBackground(new java.awt.Color(255, 255, 255));

        javax.swing.GroupLayout graphPanelLayout = new javax.swing.GroupLayout(graphPanel);
        graphPanel.setLayout(graphPanelLayout);
        graphPanelLayout.setHorizontalGroup(
            graphPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 874, Short.MAX_VALUE)
        );
        graphPanelLayout.setVerticalGroup(
            graphPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout dataPanelLayout = new javax.swing.GroupLayout(dataPanel);
        dataPanel.setLayout(dataPanelLayout);
        dataPanelLayout.setHorizontalGroup(
            dataPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(dataPanelLayout.createSequentialGroup()
                .addGroup(dataPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(dataPanelLayout.createSequentialGroup()
                        .addGap(27, 27, 27)
                        .addComponent(errorMsgDistrict, javax.swing.GroupLayout.PREFERRED_SIZE, 391, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(dataPanelLayout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(dataPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(DistrictPane, javax.swing.GroupLayout.PREFERRED_SIZE, 417, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(dataPanelLayout.createSequentialGroup()
                                .addGroup(dataPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lblDistrictId, javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(lblTemperature, javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(lblHumidity, javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(btnAddDistrict, javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(btnUpdateDistrict, javax.swing.GroupLayout.Alignment.TRAILING))
                                .addGap(31, 31, 31)
                                .addGroup(dataPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(dataPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                        .addComponent(txtDistrictTemperature, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 100, Short.MAX_VALUE)
                                        .addComponent(txtDistrictHumidity, javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(txtDistrictId))
                                    .addComponent(btnCancelDistrict)
                                    .addComponent(btnDeleteDistrict))
                                .addGap(37, 37, 37)
                                .addGroup(dataPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(lblWind)
                                    .addComponent(lblDistrict))
                                .addGap(26, 26, 26)
                                .addGroup(dataPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(txtDistrictName, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtDistrictWind, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGap(14, 14, 14)))
                .addComponent(graphPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        dataPanelLayout.setVerticalGroup(
            dataPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(dataPanelLayout.createSequentialGroup()
                .addGap(64, 64, 64)
                .addGroup(dataPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblDistrictId)
                    .addComponent(txtDistrictId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblDistrict)
                    .addComponent(txtDistrictName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(dataPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblTemperature)
                    .addComponent(txtDistrictTemperature, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblWind)
                    .addComponent(txtDistrictWind, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(27, 27, 27)
                .addGroup(dataPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblHumidity)
                    .addComponent(txtDistrictHumidity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(errorMsgDistrict, javax.swing.GroupLayout.PREFERRED_SIZE, 12, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(13, 13, 13)
                .addGroup(dataPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnAddDistrict)
                    .addComponent(btnCancelDistrict))
                .addGap(18, 18, 18)
                .addGroup(dataPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnUpdateDistrict)
                    .addComponent(btnDeleteDistrict))
                .addGap(29, 29, 29)
                .addComponent(DistrictPane, javax.swing.GroupLayout.PREFERRED_SIZE, 223, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(33, Short.MAX_VALUE))
            .addComponent(graphPanel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        getContentPane().add(dataPanel, "card2");

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void formComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formComponentShown
        // show weather data
        show_weather_data();
    }//GEN-LAST:event_formComponentShown

    private void btnAddDistrictActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddDistrictActionPerformed
        // add district data
        add_district();
    }//GEN-LAST:event_btnAddDistrictActionPerformed

    private void btnCancelDistrictActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelDistrictActionPerformed
        // clear input fields when clicked cancel button
        ClearInputs();
    }//GEN-LAST:event_btnCancelDistrictActionPerformed

    private void DistrictTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_DistrictTableMouseClicked
           // enter selected district information to respective textfields
               DefaultTableModel DistrictTableModel = (DefaultTableModel) DistrictTable.getModel();

               String id =  DistrictTableModel.getValueAt(DistrictTable.getSelectedRow(), 0).toString();
               String name = DistrictTableModel.getValueAt(DistrictTable.getSelectedRow(), 1).toString();
               String temperature = DistrictTableModel.getValueAt(DistrictTable.getSelectedRow(), 2).toString();
               String wind =  DistrictTableModel.getValueAt(DistrictTable.getSelectedRow(), 3).toString();
               String humidity =  DistrictTableModel.getValueAt(DistrictTable.getSelectedRow(), 4).toString();
        
               txtDistrictId.setText(id);
               txtDistrictName.setText(name);
               txtDistrictTemperature.setText(temperature);
               txtDistrictWind.setText(wind);
               txtDistrictHumidity.setText(humidity);
    }//GEN-LAST:event_DistrictTableMouseClicked

    private void btnUpdateDistrictActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateDistrictActionPerformed
        // update districts
              if(DistrictTable.getSelectionModel().isSelectionEmpty()){
                  errorMsgDistrict.setText("Please select a district to update");
                   errorMsgDistrict.setVisible(true);
              }
              else{
                    graphPanel.removeAll();
                    update_district();
              }
    }//GEN-LAST:event_btnUpdateDistrictActionPerformed

    private void btnDeleteDistrictActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteDistrictActionPerformed
        // delete district 
            if(DistrictTable.getSelectionModel().isSelectionEmpty()){
                errorMsgDistrict.setText("Please select a district to delete");
                 errorMsgDistrict.setVisible(true);
            }
            else{
         graphPanel.removeAll();
        delete_district();
            }
    }//GEN-LAST:event_btnDeleteDistrictActionPerformed
    

        private static ArrayList<Observer> observers = new ArrayList();

        public static ArrayList<Observer> getObservers() {
        return observers;
    }

        public static void setObservers(ArrayList<Observer> observers) {
        weatherFrame.observers = observers;
        
    }
        
        public void addObserver (Observer observer) {
        
        this.getObservers().add(observer);
    }

    // <editor-fold defaultstate="collapsed" desc=" UML Marker "> 
    // #[regen=yes,id=DCE.953756BF-95F6-9542-1A74-F97D770383AD]
    // </editor-fold>
        public void notifyObserver () {
       
        Iterator observes = getObservers().iterator();
        
        while(observes.hasNext()){
        
           Observer observe = (Observer) observes.next();
           
           observe.Update(graphPanel);
        }
    }
    
    // function that adds districts to the database    
        private void add_district(){
       
            String id = txtDistrictId.getText();
            String name = txtDistrictName.getText(); 
            String temperature = txtDistrictTemperature.getText(); 
            String wind = txtDistrictWind.getText();
            String humidity = txtDistrictHumidity.getText();
                
    
          // add district if all input fields are not empty
         if(id.length()<=0 || name.length()<=0 || temperature.length()<=0 || wind.length()<=0 || humidity.length()<=0){
               errorMsgDistrict.setVisible(true);
               errorMsgDistrict.setText("All field inputs are required!");
         }
         else{
            //set visible false to error message
            errorMsgDistrict.setVisible(false);
            graphPanel.removeAll();
            PreparedStatement prestate;
            String sql = "INSERT INTO `forecast` (`Id`,`name`,`temperature`,`wind`,`humidity`)"
                    + " VALUES (?,?,?,?,?)";
            try {
                prestate = Mysql.getConnection().prepareStatement(sql);

                prestate.setString(1, id);
                prestate.setString(2, name);
                prestate.setString(3, temperature);
                prestate.setString(4, wind);
                prestate.setString(5, humidity);
              
                if (prestate.executeUpdate() > 0) {

                    JOptionPane.showMessageDialog(null, "New District Data successfully added!");
                }

            } catch (SQLException except) {
              JOptionPane.showMessageDialog(null, "District Data could not be added!");
              except.printStackTrace();
            }
             //as soon as a new district is added old rows are cleared and new ones are shown with the new district added
       DefaultTableModel StudentTableModel = (DefaultTableModel) DistrictTable.getModel();  
       StudentTableModel.setRowCount(0);
        show_weather_data();
            ClearInputs();
            notifyObserver();
        }
        }
        
    // function that updates district data
        private void update_district(){
        
        try{
             PreparedStatement prestate;
                   String sql ="UPDATE `forecast` SET  `name`=?,`temperature`=?,`wind`=?, `humidity`=?"
                        + "WHERE `Id`=?";
                    prestate = Mysql.getConnection().prepareStatement(sql);
                    
                    prestate.setString(1, txtDistrictName.getText());
                    prestate.setString(2, txtDistrictTemperature.getText());
                    prestate.setString(3, txtDistrictWind.getText());
                    prestate.setString(4, txtDistrictHumidity.getText());    
                    prestate.setString(5, txtDistrictId.getText());
                    

                    if (prestate.executeUpdate() > 0) {

                        JOptionPane.showMessageDialog(null, "District Data successfully updated!");
                    }

                }

                catch(Exception except){
                JOptionPane.showMessageDialog(null, "District Data could not be updated!");
                except.printStackTrace();
                }
                 //as soon as district information is updated old rows are cleared and new ones are shown with updated information
                 DefaultTableModel DistrictTableModel = (DefaultTableModel) DistrictTable.getModel();  
                 DistrictTableModel.setRowCount(0);
                 show_weather_data();
                 ClearInputs();
                 notifyObserver();
        }
        
    // function that deletes district data
        private void delete_district(){    
         //delete districts          
              try{
           PreparedStatement prestate;
                 String sql ="DELETE FROM `forecast` WHERE `Id`=?";
                  prestate = Mysql.getConnection().prepareStatement(sql);
                  prestate.setString(1, txtDistrictId.getText());

                  if (prestate.executeUpdate() > 0) {

                      JOptionPane.showMessageDialog(null, "District Data Deleted Successfully!");
                  }

              }
              catch(Exception except){
              JOptionPane.showMessageDialog(null, "District Data could not be Deleted !");
              except.printStackTrace();
              }
                 //sapo fshihet nje district pastron rreshtat e vjeter dhe rishfaq te rinjte pa districtin e hequr
         DefaultTableModel DistrictTableModel = (DefaultTableModel) DistrictTable.getModel();  
         DistrictTableModel.setRowCount(0);
         show_weather_data(); 
            ClearInputs();
            notifyObserver();
         
        }
    
    //function that reads districts from database
        private ArrayList<weatherFrame> WeatherList() {
            
            ArrayList<weatherFrame> WeathersList = new ArrayList<>();
            
            try{               
           Statement states = Mysql.getConnection().createStatement();
            String sqlquery = "SELECT * FROM `forecast`";
            ResultSet getresults = states.executeQuery(sqlquery);
           weatherFrame weather;
            while (getresults.next()) {
          weather=new weatherFrame(getresults.getString("Id"),getresults.getString("name"),
                  getresults.getString("temperature"),getresults.getString("wind"), getresults.getString("humidity"));
        
      
            WeathersList.add(weather);
            }   
          }
            
            catch(Exception e){
           JOptionPane.showMessageDialog(null, "Error read table data on line 335!");
           e.printStackTrace();
            }
            return WeathersList;
        } 
        
    //function that shows districts from database
        private  void show_weather_data(){
      ArrayList<weatherFrame> list = WeatherList();
      DefaultTableModel DistrictTableModel =(DefaultTableModel) DistrictTable.getModel();
      Object [] row = new Object[5];
      for(int i=0;i<list.size(); i++){
      row[0]=list.get(i).getId();
      row[1]=list.get(i).getName();
      row[2]=list.get(i).getTemperature();
      row[3]=list.get(i).getWind();
      row[4]=list.get(i).getHumidity();
      DistrictTableModel.addRow(row);
      }  
    } 
        
    // function that clears input fields when we cancel input or after we have added a set of inputs 
        private void ClearInputs(){
                        errorMsgDistrict.setVisible(false);
                        txtDistrictId.setText("");
                        txtDistrictName.setText("");
                        txtDistrictTemperature.setText("");
                        txtDistrictWind.setText("");
                        txtDistrictHumidity.setText("");
                        txtDistrictId.requestFocus();    
        }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(weatherFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(weatherFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(weatherFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(weatherFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
       weatherFrame wframe =  new weatherFrame();
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
               wframe.setVisible(true);
            }
        });
        
        wframe.getObservers().add(new Temperature());
        wframe.getObservers().add(new Humidity());
        wframe.getObservers().add(new Wind());

        wframe.notifyObserver(); 
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane DistrictPane;
    private javax.swing.JTable DistrictTable;
    private javax.swing.JButton btnAddDistrict;
    private javax.swing.JButton btnCancelDistrict;
    private javax.swing.JButton btnDeleteDistrict;
    private javax.swing.JButton btnUpdateDistrict;
    private javax.swing.JPanel dataPanel;
    private javax.swing.JLabel errorMsgDistrict;
    private javax.swing.JPanel graphPanel;
    private javax.swing.JLabel lblDistrict;
    private javax.swing.JLabel lblDistrictId;
    private javax.swing.JLabel lblHumidity;
    private javax.swing.JLabel lblTemperature;
    private javax.swing.JLabel lblWind;
    private javax.swing.JTextField txtDistrictHumidity;
    private javax.swing.JTextField txtDistrictId;
    private javax.swing.JTextField txtDistrictName;
    private javax.swing.JTextField txtDistrictTemperature;
    private javax.swing.JTextField txtDistrictWind;
    // End of variables declaration//GEN-END:variables
}
